// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/rewards/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryPoolsRequest is request type for the Query/Pools RPC method.
type QueryPoolsRequest struct {
}

func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{2}
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

type PoolInfo struct {
	Name    string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
}

func (m *PoolInfo) Reset()         { *m = PoolInfo{} }
func (m *PoolInfo) String() string { return proto.CompactTextString(m) }
func (*PoolInfo) ProtoMessage()    {}
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{3}
}
func (m *PoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfo.Merge(m, src)
}
func (m *PoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfo proto.InternalMessageInfo

func (m *PoolInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PoolInfo) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

// QueryPoolsResponse is response type for the Query/Pools RPC method.
type QueryPoolsResponse struct {
	// details holds all the info of this module's pools.
	Pools                    []PoolInfo `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	TimeToRefill             int64      `protobuf:"varint,2,opt,name=time_to_refill,json=timeToRefill,proto3" json:"time_to_refill,omitempty"`
	EstimatedBlocksToRefill  int64      `protobuf:"varint,3,opt,name=estimated_blocks_to_refill,json=estimatedBlocksToRefill,proto3" json:"estimated_blocks_to_refill,omitempty"`
	AllocationPoolMonthsLeft int64      `protobuf:"varint,4,opt,name=allocation_pool_months_left,json=allocationPoolMonthsLeft,proto3" json:"allocation_pool_months_left,omitempty"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{4}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

func (m *QueryPoolsResponse) GetPools() []PoolInfo {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *QueryPoolsResponse) GetTimeToRefill() int64 {
	if m != nil {
		return m.TimeToRefill
	}
	return 0
}

func (m *QueryPoolsResponse) GetEstimatedBlocksToRefill() int64 {
	if m != nil {
		return m.EstimatedBlocksToRefill
	}
	return 0
}

func (m *QueryPoolsResponse) GetAllocationPoolMonthsLeft() int64 {
	if m != nil {
		return m.AllocationPoolMonthsLeft
	}
	return 0
}

// QueryBlockRewardRequest is request type for the Query/BlockReward RPC method.
type QueryBlockRewardRequest struct {
}

func (m *QueryBlockRewardRequest) Reset()         { *m = QueryBlockRewardRequest{} }
func (m *QueryBlockRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockRewardRequest) ProtoMessage()    {}
func (*QueryBlockRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{5}
}
func (m *QueryBlockRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockRewardRequest.Merge(m, src)
}
func (m *QueryBlockRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockRewardRequest proto.InternalMessageInfo

// QueryBlockRewardResponse is response type for the Query/BlockReward RPC method.
type QueryBlockRewardResponse struct {
	Reward types.Coin `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward"`
}

func (m *QueryBlockRewardResponse) Reset()         { *m = QueryBlockRewardResponse{} }
func (m *QueryBlockRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockRewardResponse) ProtoMessage()    {}
func (*QueryBlockRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{6}
}
func (m *QueryBlockRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockRewardResponse.Merge(m, src)
}
func (m *QueryBlockRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockRewardResponse proto.InternalMessageInfo

func (m *QueryBlockRewardResponse) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

// QueryShowIprpcDataRequest is request type for the Query/ShowIprpcData RPC method.
type QueryShowIprpcDataRequest struct {
}

func (m *QueryShowIprpcDataRequest) Reset()         { *m = QueryShowIprpcDataRequest{} }
func (m *QueryShowIprpcDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowIprpcDataRequest) ProtoMessage()    {}
func (*QueryShowIprpcDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{7}
}
func (m *QueryShowIprpcDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowIprpcDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowIprpcDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowIprpcDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowIprpcDataRequest.Merge(m, src)
}
func (m *QueryShowIprpcDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowIprpcDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowIprpcDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowIprpcDataRequest proto.InternalMessageInfo

// QueryShowIprpcDataResponse is response type for the Query/ShowIprpcData RPC method.
type QueryShowIprpcDataResponse struct {
	MinCost            types.Coin `protobuf:"bytes,1,opt,name=min_cost,json=minCost,proto3" json:"min_cost"`
	IprpcSubscriptions []string   `protobuf:"bytes,2,rep,name=iprpc_subscriptions,json=iprpcSubscriptions,proto3" json:"iprpc_subscriptions,omitempty"`
}

func (m *QueryShowIprpcDataResponse) Reset()         { *m = QueryShowIprpcDataResponse{} }
func (m *QueryShowIprpcDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowIprpcDataResponse) ProtoMessage()    {}
func (*QueryShowIprpcDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{8}
}
func (m *QueryShowIprpcDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowIprpcDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowIprpcDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowIprpcDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowIprpcDataResponse.Merge(m, src)
}
func (m *QueryShowIprpcDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowIprpcDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowIprpcDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowIprpcDataResponse proto.InternalMessageInfo

func (m *QueryShowIprpcDataResponse) GetMinCost() types.Coin {
	if m != nil {
		return m.MinCost
	}
	return types.Coin{}
}

func (m *QueryShowIprpcDataResponse) GetIprpcSubscriptions() []string {
	if m != nil {
		return m.IprpcSubscriptions
	}
	return nil
}

// QueryProviderRewardRequest is request type for the Query/ProviderReward RPC method.
type QuerySpecTrackedInfoRequest struct {
	ChainId  string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QuerySpecTrackedInfoRequest) Reset()         { *m = QuerySpecTrackedInfoRequest{} }
func (m *QuerySpecTrackedInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpecTrackedInfoRequest) ProtoMessage()    {}
func (*QuerySpecTrackedInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{9}
}
func (m *QuerySpecTrackedInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecTrackedInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecTrackedInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecTrackedInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecTrackedInfoRequest.Merge(m, src)
}
func (m *QuerySpecTrackedInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecTrackedInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecTrackedInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecTrackedInfoRequest proto.InternalMessageInfo

func (m *QuerySpecTrackedInfoRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QuerySpecTrackedInfoRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// QueryProviderRewardResponse is response type for the Query/ProviderReward RPC method.
type QuerySpecTrackedInfoResponse struct {
	Info []BasePayWithIndex `protobuf:"bytes,1,rep,name=info,proto3" json:"info"`
}

func (m *QuerySpecTrackedInfoResponse) Reset()         { *m = QuerySpecTrackedInfoResponse{} }
func (m *QuerySpecTrackedInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpecTrackedInfoResponse) ProtoMessage()    {}
func (*QuerySpecTrackedInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{10}
}
func (m *QuerySpecTrackedInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecTrackedInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecTrackedInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecTrackedInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecTrackedInfoResponse.Merge(m, src)
}
func (m *QuerySpecTrackedInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecTrackedInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecTrackedInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecTrackedInfoResponse proto.InternalMessageInfo

func (m *QuerySpecTrackedInfoResponse) GetInfo() []BasePayWithIndex {
	if m != nil {
		return m.Info
	}
	return nil
}

// QueryIprpcProviderRewardEstimationRequest is request type for the Query/IprpcProviderRewardEstimation RPC method.
type QueryIprpcProviderRewardEstimationRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryIprpcProviderRewardEstimationRequest) Reset() {
	*m = QueryIprpcProviderRewardEstimationRequest{}
}
func (m *QueryIprpcProviderRewardEstimationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIprpcProviderRewardEstimationRequest) ProtoMessage() {}
func (*QueryIprpcProviderRewardEstimationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{11}
}
func (m *QueryIprpcProviderRewardEstimationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIprpcProviderRewardEstimationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIprpcProviderRewardEstimationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIprpcProviderRewardEstimationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIprpcProviderRewardEstimationRequest.Merge(m, src)
}
func (m *QueryIprpcProviderRewardEstimationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIprpcProviderRewardEstimationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIprpcProviderRewardEstimationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIprpcProviderRewardEstimationRequest proto.InternalMessageInfo

func (m *QueryIprpcProviderRewardEstimationRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// QueryIprpcProviderRewardEstimationResponse is response type for the Query/IprpcProviderRewardEstimation RPC method.
type QueryIprpcProviderRewardEstimationResponse struct {
	SpecFunds []Specfund `protobuf:"bytes,1,rep,name=spec_funds,json=specFunds,proto3" json:"spec_funds"`
}

func (m *QueryIprpcProviderRewardEstimationResponse) Reset() {
	*m = QueryIprpcProviderRewardEstimationResponse{}
}
func (m *QueryIprpcProviderRewardEstimationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIprpcProviderRewardEstimationResponse) ProtoMessage() {}
func (*QueryIprpcProviderRewardEstimationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{12}
}
func (m *QueryIprpcProviderRewardEstimationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIprpcProviderRewardEstimationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIprpcProviderRewardEstimationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIprpcProviderRewardEstimationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIprpcProviderRewardEstimationResponse.Merge(m, src)
}
func (m *QueryIprpcProviderRewardEstimationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIprpcProviderRewardEstimationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIprpcProviderRewardEstimationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIprpcProviderRewardEstimationResponse proto.InternalMessageInfo

func (m *QueryIprpcProviderRewardEstimationResponse) GetSpecFunds() []Specfund {
	if m != nil {
		return m.SpecFunds
	}
	return nil
}

// QueryIprpcSpecRewardRequest is request type for the Query/IprpcSpecReward RPC method.
type QueryIprpcSpecRewardRequest struct {
	Spec string `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *QueryIprpcSpecRewardRequest) Reset()         { *m = QueryIprpcSpecRewardRequest{} }
func (m *QueryIprpcSpecRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIprpcSpecRewardRequest) ProtoMessage()    {}
func (*QueryIprpcSpecRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{13}
}
func (m *QueryIprpcSpecRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIprpcSpecRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIprpcSpecRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIprpcSpecRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIprpcSpecRewardRequest.Merge(m, src)
}
func (m *QueryIprpcSpecRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIprpcSpecRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIprpcSpecRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIprpcSpecRewardRequest proto.InternalMessageInfo

func (m *QueryIprpcSpecRewardRequest) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

// QueryIprpcSpecRewardResponse is response type for the Query/IprpcSpecReward RPC method.
type QueryIprpcSpecRewardResponse struct {
	IprpcRewards   []IprpcReward `protobuf:"bytes,1,rep,name=iprpc_rewards,json=iprpcRewards,proto3" json:"iprpc_rewards"`
	CurrentMonthId uint64        `protobuf:"varint,2,opt,name=current_month_id,json=currentMonthId,proto3" json:"current_month_id,omitempty"`
}

func (m *QueryIprpcSpecRewardResponse) Reset()         { *m = QueryIprpcSpecRewardResponse{} }
func (m *QueryIprpcSpecRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIprpcSpecRewardResponse) ProtoMessage()    {}
func (*QueryIprpcSpecRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{14}
}
func (m *QueryIprpcSpecRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIprpcSpecRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIprpcSpecRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIprpcSpecRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIprpcSpecRewardResponse.Merge(m, src)
}
func (m *QueryIprpcSpecRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIprpcSpecRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIprpcSpecRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIprpcSpecRewardResponse proto.InternalMessageInfo

func (m *QueryIprpcSpecRewardResponse) GetIprpcRewards() []IprpcReward {
	if m != nil {
		return m.IprpcRewards
	}
	return nil
}

func (m *QueryIprpcSpecRewardResponse) GetCurrentMonthId() uint64 {
	if m != nil {
		return m.CurrentMonthId
	}
	return 0
}

// QueryPendingIbcIprpcFundsRequest is request type for the Query/PendingIbcIprpcFund RPC method.
type QueryPendingIbcIprpcFundsRequest struct {
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *QueryPendingIbcIprpcFundsRequest) Reset()         { *m = QueryPendingIbcIprpcFundsRequest{} }
func (m *QueryPendingIbcIprpcFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingIbcIprpcFundsRequest) ProtoMessage()    {}
func (*QueryPendingIbcIprpcFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{15}
}
func (m *QueryPendingIbcIprpcFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingIbcIprpcFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingIbcIprpcFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingIbcIprpcFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingIbcIprpcFundsRequest.Merge(m, src)
}
func (m *QueryPendingIbcIprpcFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingIbcIprpcFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingIbcIprpcFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingIbcIprpcFundsRequest proto.InternalMessageInfo

func (m *QueryPendingIbcIprpcFundsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type PendingIbcIprpcFundInfo struct {
	PendingIbcIprpcFund PendingIbcIprpcFund `protobuf:"bytes,1,opt,name=pending_ibc_iprpc_fund,json=pendingIbcIprpcFund,proto3" json:"pending_ibc_iprpc_fund"`
	Cost                types.Coin          `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost"`
}

func (m *PendingIbcIprpcFundInfo) Reset()         { *m = PendingIbcIprpcFundInfo{} }
func (m *PendingIbcIprpcFundInfo) String() string { return proto.CompactTextString(m) }
func (*PendingIbcIprpcFundInfo) ProtoMessage()    {}
func (*PendingIbcIprpcFundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{16}
}
func (m *PendingIbcIprpcFundInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingIbcIprpcFundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingIbcIprpcFundInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingIbcIprpcFundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingIbcIprpcFundInfo.Merge(m, src)
}
func (m *PendingIbcIprpcFundInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingIbcIprpcFundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingIbcIprpcFundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingIbcIprpcFundInfo proto.InternalMessageInfo

func (m *PendingIbcIprpcFundInfo) GetPendingIbcIprpcFund() PendingIbcIprpcFund {
	if m != nil {
		return m.PendingIbcIprpcFund
	}
	return PendingIbcIprpcFund{}
}

func (m *PendingIbcIprpcFundInfo) GetCost() types.Coin {
	if m != nil {
		return m.Cost
	}
	return types.Coin{}
}

// QueryPendingIbcIprpcFundsResponse is response type for the Query/PendingIbcIprpcFund RPC method.
type QueryPendingIbcIprpcFundsResponse struct {
	PendingIbcIprpcFundsInfo []PendingIbcIprpcFundInfo `protobuf:"bytes,1,rep,name=pending_ibc_iprpc_funds_info,json=pendingIbcIprpcFundsInfo,proto3" json:"pending_ibc_iprpc_funds_info"`
}

func (m *QueryPendingIbcIprpcFundsResponse) Reset()         { *m = QueryPendingIbcIprpcFundsResponse{} }
func (m *QueryPendingIbcIprpcFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingIbcIprpcFundsResponse) ProtoMessage()    {}
func (*QueryPendingIbcIprpcFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bce9a904340007, []int{17}
}
func (m *QueryPendingIbcIprpcFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingIbcIprpcFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingIbcIprpcFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingIbcIprpcFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingIbcIprpcFundsResponse.Merge(m, src)
}
func (m *QueryPendingIbcIprpcFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingIbcIprpcFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingIbcIprpcFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingIbcIprpcFundsResponse proto.InternalMessageInfo

func (m *QueryPendingIbcIprpcFundsResponse) GetPendingIbcIprpcFundsInfo() []PendingIbcIprpcFundInfo {
	if m != nil {
		return m.PendingIbcIprpcFundsInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.rewards.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.rewards.QueryParamsResponse")
	proto.RegisterType((*QueryPoolsRequest)(nil), "lavanet.lava.rewards.QueryPoolsRequest")
	proto.RegisterType((*PoolInfo)(nil), "lavanet.lava.rewards.PoolInfo")
	proto.RegisterType((*QueryPoolsResponse)(nil), "lavanet.lava.rewards.QueryPoolsResponse")
	proto.RegisterType((*QueryBlockRewardRequest)(nil), "lavanet.lava.rewards.QueryBlockRewardRequest")
	proto.RegisterType((*QueryBlockRewardResponse)(nil), "lavanet.lava.rewards.QueryBlockRewardResponse")
	proto.RegisterType((*QueryShowIprpcDataRequest)(nil), "lavanet.lava.rewards.QueryShowIprpcDataRequest")
	proto.RegisterType((*QueryShowIprpcDataResponse)(nil), "lavanet.lava.rewards.QueryShowIprpcDataResponse")
	proto.RegisterType((*QuerySpecTrackedInfoRequest)(nil), "lavanet.lava.rewards.QuerySpecTrackedInfoRequest")
	proto.RegisterType((*QuerySpecTrackedInfoResponse)(nil), "lavanet.lava.rewards.QuerySpecTrackedInfoResponse")
	proto.RegisterType((*QueryIprpcProviderRewardEstimationRequest)(nil), "lavanet.lava.rewards.QueryIprpcProviderRewardEstimationRequest")
	proto.RegisterType((*QueryIprpcProviderRewardEstimationResponse)(nil), "lavanet.lava.rewards.QueryIprpcProviderRewardEstimationResponse")
	proto.RegisterType((*QueryIprpcSpecRewardRequest)(nil), "lavanet.lava.rewards.QueryIprpcSpecRewardRequest")
	proto.RegisterType((*QueryIprpcSpecRewardResponse)(nil), "lavanet.lava.rewards.QueryIprpcSpecRewardResponse")
	proto.RegisterType((*QueryPendingIbcIprpcFundsRequest)(nil), "lavanet.lava.rewards.QueryPendingIbcIprpcFundsRequest")
	proto.RegisterType((*PendingIbcIprpcFundInfo)(nil), "lavanet.lava.rewards.PendingIbcIprpcFundInfo")
	proto.RegisterType((*QueryPendingIbcIprpcFundsResponse)(nil), "lavanet.lava.rewards.QueryPendingIbcIprpcFundsResponse")
}

func init() { proto.RegisterFile("lavanet/lava/rewards/query.proto", fileDescriptor_15bce9a904340007) }

var fileDescriptor_15bce9a904340007 = []byte{
	// 1200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcb, 0x6f, 0x1b, 0x45,
	0x18, 0xcf, 0xa6, 0x6e, 0x9a, 0x4c, 0xfa, 0x80, 0x49, 0xd4, 0x38, 0x9b, 0xd4, 0x4d, 0xb6, 0x81,
	0x3a, 0x91, 0xb2, 0x9b, 0x87, 0x94, 0xa2, 0x56, 0x85, 0x2a, 0x29, 0x20, 0x4b, 0x45, 0x4a, 0x9d,
	0x48, 0x48, 0x5c, 0x96, 0xf1, 0xee, 0xd8, 0x1e, 0x65, 0xbd, 0xb3, 0xd9, 0x59, 0x27, 0x8d, 0xa2,
	0x08, 0x09, 0xc4, 0x81, 0x1b, 0x12, 0x12, 0xea, 0x95, 0x2b, 0x27, 0x0e, 0x5c, 0x39, 0xd3, 0x63,
	0x25, 0x2e, 0x9c, 0x00, 0x25, 0xdc, 0x91, 0xf8, 0x0b, 0xd0, 0x7c, 0x33, 0xeb, 0x3a, 0xf1, 0x7a,
	0xeb, 0x72, 0xf2, 0xee, 0xcc, 0xf7, 0xf8, 0xfd, 0xbe, 0xe7, 0x1a, 0xcd, 0x05, 0xe4, 0x80, 0x84,
	0x34, 0x71, 0xe4, 0xaf, 0x13, 0xd3, 0x43, 0x12, 0xfb, 0xc2, 0xd9, 0x6f, 0xd3, 0xf8, 0xc8, 0x8e,
	0x62, 0x9e, 0x70, 0x3c, 0xa9, 0x25, 0x6c, 0xf9, 0x6b, 0x6b, 0x09, 0x73, 0xc9, 0xe3, 0xa2, 0xc5,
	0x85, 0x53, 0x23, 0x82, 0x2a, 0x71, 0xe7, 0x60, 0xb5, 0x46, 0x13, 0xb2, 0xea, 0x44, 0xa4, 0xc1,
	0x42, 0x92, 0x30, 0x1e, 0x2a, 0x0b, 0x66, 0xa9, 0x5b, 0x36, 0x95, 0xf2, 0x38, 0x4b, 0xef, 0x27,
	0x1b, 0xbc, 0xc1, 0xe1, 0xd1, 0x91, 0x4f, 0xfa, 0x74, 0xb6, 0xc1, 0x79, 0x23, 0xa0, 0x0e, 0x89,
	0x98, 0x43, 0xc2, 0x90, 0x27, 0x60, 0x52, 0xe8, 0xdb, 0x3b, 0x99, 0xb8, 0xa5, 0x07, 0x37, 0x22,
	0x1a, 0xba, 0x99, 0x4d, 0x8e, 0x45, 0x71, 0xe4, 0x69, 0x89, 0xf9, 0x4c, 0x89, 0x88, 0xc4, 0xa4,
	0xa5, 0x3d, 0x59, 0x93, 0x08, 0x3f, 0x95, 0xfc, 0xb6, 0xe1, 0xb0, 0x4a, 0xf7, 0xdb, 0x54, 0x24,
	0xd6, 0x53, 0x34, 0x71, 0xee, 0x54, 0x44, 0x3c, 0x14, 0x14, 0xdf, 0x47, 0x23, 0x4a, 0xb9, 0x68,
	0xcc, 0x19, 0xe5, 0xf1, 0xb5, 0x59, 0x3b, 0x2b, 0x7a, 0xb6, 0xd2, 0xda, 0x2c, 0xbc, 0xf8, 0xe3,
	0xf6, 0x50, 0x55, 0x6b, 0x58, 0x13, 0xe8, 0x6d, 0x65, 0x92, 0xf3, 0xa0, 0xe3, 0xe7, 0x6b, 0x03,
	0x8d, 0xca, 0x83, 0x4a, 0x58, 0xe7, 0x18, 0xa3, 0x42, 0x48, 0x5a, 0x14, 0x6c, 0x8f, 0x55, 0xe1,
	0x19, 0x53, 0x74, 0xa5, 0x46, 0x02, 0x12, 0x7a, 0xb4, 0x38, 0x3c, 0x77, 0xa9, 0x3c, 0xbe, 0x36,
	0x6d, 0xab, 0x70, 0xdb, 0x32, 0x18, 0xb6, 0x0e, 0xb7, 0xbd, 0xc5, 0x59, 0xb8, 0xb9, 0x22, 0xfd,
	0xfd, 0xf8, 0xe7, 0xed, 0x72, 0x83, 0x25, 0xcd, 0x76, 0xcd, 0xf6, 0x78, 0xcb, 0xd1, 0xb9, 0x51,
	0x3f, 0xcb, 0xc2, 0xdf, 0x73, 0x92, 0xa3, 0x88, 0x0a, 0x50, 0x10, 0xd5, 0xd4, 0xb6, 0xf5, 0xaf,
	0x91, 0x86, 0x41, 0xa1, 0xeb, 0xf0, 0xbd, 0x1c, 0xc9, 0x83, 0xa2, 0x01, 0xbe, 0x4b, 0x7d, 0xe8,
	0x6a, 0x02, 0x9a, 0xb0, 0x52, 0xc1, 0x0b, 0xe8, 0x7a, 0xc2, 0x5a, 0xd4, 0x4d, 0xb8, 0x1b, 0xd3,
	0x3a, 0x0b, 0x82, 0xe2, 0xf0, 0x9c, 0x51, 0xbe, 0x54, 0xbd, 0x2a, 0x4f, 0x77, 0x79, 0x15, 0xce,
	0xf0, 0x03, 0x64, 0x52, 0x91, 0xb0, 0x16, 0x49, 0xa8, 0xef, 0xd6, 0x02, 0xee, 0xed, 0x89, 0x2e,
	0x8d, 0x4b, 0xa0, 0x31, 0xd5, 0x91, 0xd8, 0x04, 0x81, 0x8e, 0xf2, 0x43, 0x34, 0x43, 0x82, 0x80,
	0x7b, 0x50, 0x3a, 0xae, 0x74, 0xeb, 0xb6, 0x78, 0x98, 0x34, 0x85, 0x1b, 0xd0, 0x7a, 0x52, 0x2c,
	0x80, 0x76, 0xf1, 0x95, 0x88, 0x04, 0xfa, 0x09, 0x08, 0x3c, 0xa1, 0xf5, 0xc4, 0x9a, 0x46, 0x53,
	0xc0, 0x19, 0xac, 0x56, 0x81, 0x4c, 0x9a, 0x97, 0x1d, 0x54, 0xec, 0xbd, 0xd2, 0x41, 0xb9, 0x87,
	0x46, 0x14, 0x73, 0x5d, 0x04, 0x39, 0x19, 0xd1, 0x15, 0xa0, 0xc4, 0xad, 0x19, 0x34, 0x0d, 0x46,
	0x77, 0x9a, 0xfc, 0xb0, 0x22, 0xab, 0xf4, 0x31, 0x49, 0x48, 0xea, 0xf1, 0x1b, 0x03, 0x99, 0x59,
	0xb7, 0x9d, 0x4c, 0x8c, 0xb6, 0x58, 0xe8, 0x7a, 0x5c, 0x24, 0x83, 0xba, 0xbd, 0xd2, 0x62, 0xe1,
	0x16, 0x17, 0x09, 0x76, 0xd0, 0x04, 0x34, 0x85, 0x2b, 0xda, 0x35, 0xe1, 0xc5, 0x2c, 0x82, 0x4e,
	0x83, 0x7a, 0x1a, 0xab, 0x62, 0xb8, 0xda, 0xe9, 0xbe, 0xb1, 0x76, 0xd1, 0x8c, 0x82, 0x12, 0x51,
	0x6f, 0x37, 0x26, 0xde, 0x1e, 0xf5, 0x65, 0x7e, 0x35, 0x54, 0x3c, 0x8d, 0x46, 0xbd, 0x26, 0x61,
	0xa1, 0xcb, 0x7c, 0x5d, 0xab, 0x57, 0xe0, 0xbd, 0xe2, 0x63, 0x13, 0x8d, 0x46, 0x31, 0x3f, 0x60,
	0x3e, 0x8d, 0x21, 0xdd, 0x63, 0xd5, 0xce, 0xbb, 0xf5, 0x39, 0x9a, 0xcd, 0xb6, 0xaa, 0x29, 0x3e,
	0x42, 0x05, 0x16, 0xd6, 0xb9, 0xae, 0xb5, 0x77, 0xb3, 0x6b, 0x6d, 0x93, 0x08, 0xba, 0x4d, 0x8e,
	0x3e, 0x65, 0x49, 0xb3, 0x12, 0xfa, 0xf4, 0x99, 0xe6, 0x0a, 0x9a, 0xd6, 0xc7, 0x68, 0x11, 0x3c,
	0x40, 0xf8, 0xb6, 0xb5, 0x5f, 0x95, 0xbd, 0x0f, 0x55, 0x09, 0x31, 0x1e, 0xa6, 0x2c, 0xba, 0xa1,
	0x1a, 0x17, 0xa0, 0xee, 0xa3, 0xa5, 0x41, 0x0c, 0x69, 0xe0, 0x5b, 0x08, 0x89, 0x88, 0x7a, 0x6e,
	0xbd, 0x1d, 0xfa, 0xaf, 0x69, 0x15, 0xc9, 0x5d, 0x8a, 0x69, 0xd8, 0x63, 0x52, 0xef, 0x23, 0xa9,
	0x66, 0xad, 0xea, 0x98, 0x83, 0x4b, 0x29, 0x76, 0xae, 0x20, 0xe5, 0x6c, 0x90, 0xb2, 0xe9, 0x6c,
	0x90, 0xcf, 0xd6, 0xf7, 0x86, 0x8e, 0x68, 0x8f, 0x8e, 0x06, 0xf6, 0x04, 0x5d, 0x53, 0x89, 0xd7,
	0xee, 0x35, 0xb6, 0xf9, 0x6c, 0x6c, 0x60, 0x45, 0x59, 0xd0, 0xf0, 0xae, 0xb2, 0x57, 0x47, 0x02,
	0x97, 0xd1, 0x5b, 0x5e, 0x3b, 0x8e, 0x69, 0x98, 0xa8, 0x2e, 0x93, 0xe9, 0x97, 0x39, 0x2e, 0x54,
	0xaf, 0xeb, 0x73, 0xe8, 0xad, 0x8a, 0x6f, 0xdd, 0x47, 0x73, 0x6a, 0x98, 0xd0, 0xd0, 0x67, 0x61,
	0xa3, 0x52, 0xf3, 0xc0, 0x36, 0x10, 0x4d, 0x09, 0xdd, 0x44, 0x23, 0x75, 0x16, 0x24, 0x9d, 0xe0,
	0xeb, 0x37, 0xeb, 0x67, 0x03, 0x4d, 0x65, 0xe8, 0xc1, 0x80, 0xf4, 0xd1, 0xcd, 0x48, 0x5d, 0xb9,
	0xac, 0xe6, 0xb9, 0x8a, 0x9b, 0x0c, 0xa7, 0x6e, 0x89, 0xc5, 0x3e, 0xf3, 0xa9, 0xd7, 0x9c, 0x26,
	0x38, 0x11, 0xf5, 0x5e, 0xe1, 0x75, 0x54, 0x80, 0x36, 0x1b, 0x1e, 0xac, 0xcd, 0x40, 0xd8, 0x7a,
	0x6e, 0xa0, 0xf9, 0x1c, 0xce, 0x3a, 0x21, 0x02, 0xcd, 0x66, 0x13, 0x10, 0x6e, 0x57, 0xe9, 0x2f,
	0x0f, 0x4c, 0xa3, 0x6b, 0xea, 0x16, 0x33, 0xa8, 0x08, 0x79, 0xbf, 0xf6, 0x0f, 0x42, 0x97, 0x01,
	0x1a, 0xfe, 0xca, 0x40, 0x23, 0x6a, 0x37, 0xe1, 0x72, 0xb6, 0x8f, 0xde, 0x55, 0x68, 0x2e, 0x0e,
	0x20, 0xa9, 0xe8, 0x59, 0x0b, 0x5f, 0xfe, 0xf6, 0xf7, 0x77, 0xc3, 0x25, 0x3c, 0xeb, 0xe4, 0xec,
	0x5d, 0xfc, 0x05, 0xba, 0x0c, 0x5b, 0x06, 0xdf, 0xcd, 0xb3, 0xdc, 0xb5, 0x25, 0xcd, 0xf2, 0xeb,
	0x05, 0x35, 0x82, 0x3b, 0x80, 0xe0, 0x16, 0x9e, 0xe9, 0x83, 0x00, 0xfc, 0x3e, 0x37, 0xd0, 0x78,
	0xd7, 0x60, 0xc7, 0xcb, 0x39, 0xe6, 0x7b, 0x77, 0x83, 0x69, 0x0f, 0x2a, 0xae, 0x31, 0x2d, 0x01,
	0xa6, 0x05, 0x6c, 0x65, 0x63, 0x82, 0xa5, 0xa7, 0x3b, 0x14, 0xff, 0x60, 0xa0, 0x6b, 0xe7, 0x16,
	0x00, 0x76, 0x72, 0xbc, 0x65, 0x2d, 0x12, 0x73, 0x65, 0x70, 0x05, 0x0d, 0x70, 0x19, 0x00, 0xde,
	0xc5, 0xef, 0x64, 0x03, 0x14, 0x4d, 0x7e, 0xa8, 0x4b, 0xd5, 0x97, 0x88, 0x7e, 0x31, 0xd0, 0x8d,
	0x0b, 0x33, 0x1c, 0xaf, 0xe6, 0x39, 0xcd, 0xdc, 0x22, 0xe6, 0xda, 0x9b, 0xa8, 0x68, 0xa4, 0x5b,
	0x80, 0xf4, 0x21, 0x7e, 0x90, 0x8d, 0xf4, 0x82, 0x9a, 0x73, 0x9c, 0xae, 0xa9, 0x13, 0xe7, 0x38,
	0x9d, 0xed, 0x27, 0xf8, 0xd4, 0x40, 0xb7, 0x72, 0x07, 0x3b, 0xfe, 0x20, 0x07, 0xda, 0x20, 0xbb,
	0xc5, 0x7c, 0xf4, 0xff, 0x0d, 0x68, 0xa6, 0xef, 0x03, 0xd3, 0xf7, 0xf0, 0x86, 0xd3, 0xff, 0x23,
	0xd7, 0x4d, 0x39, 0xe9, 0xea, 0xe9, 0x26, 0xf9, 0x93, 0x81, 0x6e, 0x5c, 0x58, 0x0b, 0xb9, 0x49,
	0xca, 0x5e, 0x3b, 0xb9, 0x49, 0xea, 0xb3, 0x75, 0xac, 0x0d, 0x80, 0xbe, 0x82, 0xed, 0x3c, 0xe8,
	0xb0, 0x30, 0x53, 0xd8, 0xf2, 0xe5, 0x04, 0xff, 0x6a, 0xa0, 0xc9, 0xac, 0xe9, 0x89, 0x37, 0xf2,
	0xda, 0xbf, 0xff, 0x8a, 0x31, 0xef, 0xbd, 0xb1, 0xde, 0x60, 0xc1, 0xef, 0x33, 0xc2, 0x9d, 0x63,
	0xb5, 0xc2, 0x4e, 0x36, 0x1f, 0xbf, 0x38, 0x2d, 0x19, 0x2f, 0x4f, 0x4b, 0xc6, 0x5f, 0xa7, 0x25,
	0xe3, 0xdb, 0xb3, 0xd2, 0xd0, 0xcb, 0xb3, 0xd2, 0xd0, 0xef, 0x67, 0xa5, 0xa1, 0xcf, 0x96, 0xba,
	0x3e, 0xcd, 0xcf, 0xd9, 0x3e, 0x58, 0x77, 0x9e, 0x75, 0x1c, 0xc0, 0x27, 0x7a, 0x6d, 0x04, 0xfe,
	0xa0, 0xac, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x72, 0x76, 0xfc, 0x2c, 0xc4, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Pools queries all the pools' info
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	// BlockReward queries for the validators reward for proposing a block
	BlockReward(ctx context.Context, in *QueryBlockRewardRequest, opts ...grpc.CallOption) (*QueryBlockRewardResponse, error)
	// ShowIprpcData queries for the iprpc data
	ShowIprpcData(ctx context.Context, in *QueryShowIprpcDataRequest, opts ...grpc.CallOption) (*QueryShowIprpcDataResponse, error)
	// ProviderReward queries for the providers reward for their services
	SpecTrackedInfo(ctx context.Context, in *QuerySpecTrackedInfoRequest, opts ...grpc.CallOption) (*QuerySpecTrackedInfoResponse, error)
	// IprpcProviderRewardEstimation queries for a provider's current IPRPC reward (relative to its serviced CU)
	IprpcProviderRewardEstimation(ctx context.Context, in *QueryIprpcProviderRewardEstimationRequest, opts ...grpc.CallOption) (*QueryIprpcProviderRewardEstimationResponse, error)
	// IprpcSpecReward queries for a spec's IPRPC reward
	IprpcSpecReward(ctx context.Context, in *QueryIprpcSpecRewardRequest, opts ...grpc.CallOption) (*QueryIprpcSpecRewardResponse, error)
	// PendingIbcIprpcFunds queries for a spec's IPRPC reward
	PendingIbcIprpcFunds(ctx context.Context, in *QueryPendingIbcIprpcFundsRequest, opts ...grpc.CallOption) (*QueryPendingIbcIprpcFundsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockReward(ctx context.Context, in *QueryBlockRewardRequest, opts ...grpc.CallOption) (*QueryBlockRewardResponse, error) {
	out := new(QueryBlockRewardResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/BlockReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowIprpcData(ctx context.Context, in *QueryShowIprpcDataRequest, opts ...grpc.CallOption) (*QueryShowIprpcDataResponse, error) {
	out := new(QueryShowIprpcDataResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/ShowIprpcData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecTrackedInfo(ctx context.Context, in *QuerySpecTrackedInfoRequest, opts ...grpc.CallOption) (*QuerySpecTrackedInfoResponse, error) {
	out := new(QuerySpecTrackedInfoResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/SpecTrackedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IprpcProviderRewardEstimation(ctx context.Context, in *QueryIprpcProviderRewardEstimationRequest, opts ...grpc.CallOption) (*QueryIprpcProviderRewardEstimationResponse, error) {
	out := new(QueryIprpcProviderRewardEstimationResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/IprpcProviderRewardEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IprpcSpecReward(ctx context.Context, in *QueryIprpcSpecRewardRequest, opts ...grpc.CallOption) (*QueryIprpcSpecRewardResponse, error) {
	out := new(QueryIprpcSpecRewardResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/IprpcSpecReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingIbcIprpcFunds(ctx context.Context, in *QueryPendingIbcIprpcFundsRequest, opts ...grpc.CallOption) (*QueryPendingIbcIprpcFundsResponse, error) {
	out := new(QueryPendingIbcIprpcFundsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.rewards.Query/PendingIbcIprpcFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Pools queries all the pools' info
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	// BlockReward queries for the validators reward for proposing a block
	BlockReward(context.Context, *QueryBlockRewardRequest) (*QueryBlockRewardResponse, error)
	// ShowIprpcData queries for the iprpc data
	ShowIprpcData(context.Context, *QueryShowIprpcDataRequest) (*QueryShowIprpcDataResponse, error)
	// ProviderReward queries for the providers reward for their services
	SpecTrackedInfo(context.Context, *QuerySpecTrackedInfoRequest) (*QuerySpecTrackedInfoResponse, error)
	// IprpcProviderRewardEstimation queries for a provider's current IPRPC reward (relative to its serviced CU)
	IprpcProviderRewardEstimation(context.Context, *QueryIprpcProviderRewardEstimationRequest) (*QueryIprpcProviderRewardEstimationResponse, error)
	// IprpcSpecReward queries for a spec's IPRPC reward
	IprpcSpecReward(context.Context, *QueryIprpcSpecRewardRequest) (*QueryIprpcSpecRewardResponse, error)
	// PendingIbcIprpcFunds queries for a spec's IPRPC reward
	PendingIbcIprpcFunds(context.Context, *QueryPendingIbcIprpcFundsRequest) (*QueryPendingIbcIprpcFundsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) BlockReward(ctx context.Context, req *QueryBlockRewardRequest) (*QueryBlockRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockReward not implemented")
}
func (*UnimplementedQueryServer) ShowIprpcData(ctx context.Context, req *QueryShowIprpcDataRequest) (*QueryShowIprpcDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowIprpcData not implemented")
}
func (*UnimplementedQueryServer) SpecTrackedInfo(ctx context.Context, req *QuerySpecTrackedInfoRequest) (*QuerySpecTrackedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecTrackedInfo not implemented")
}
func (*UnimplementedQueryServer) IprpcProviderRewardEstimation(ctx context.Context, req *QueryIprpcProviderRewardEstimationRequest) (*QueryIprpcProviderRewardEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IprpcProviderRewardEstimation not implemented")
}
func (*UnimplementedQueryServer) IprpcSpecReward(ctx context.Context, req *QueryIprpcSpecRewardRequest) (*QueryIprpcSpecRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IprpcSpecReward not implemented")
}
func (*UnimplementedQueryServer) PendingIbcIprpcFunds(ctx context.Context, req *QueryPendingIbcIprpcFundsRequest) (*QueryPendingIbcIprpcFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingIbcIprpcFunds not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/BlockReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockReward(ctx, req.(*QueryBlockRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowIprpcData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowIprpcDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowIprpcData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/ShowIprpcData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowIprpcData(ctx, req.(*QueryShowIprpcDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecTrackedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpecTrackedInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecTrackedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/SpecTrackedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecTrackedInfo(ctx, req.(*QuerySpecTrackedInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IprpcProviderRewardEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIprpcProviderRewardEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IprpcProviderRewardEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/IprpcProviderRewardEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IprpcProviderRewardEstimation(ctx, req.(*QueryIprpcProviderRewardEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IprpcSpecReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIprpcSpecRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IprpcSpecReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/IprpcSpecReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IprpcSpecReward(ctx, req.(*QueryIprpcSpecRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingIbcIprpcFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingIbcIprpcFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingIbcIprpcFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.rewards.Query/PendingIbcIprpcFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingIbcIprpcFunds(ctx, req.(*QueryPendingIbcIprpcFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.rewards.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "BlockReward",
			Handler:    _Query_BlockReward_Handler,
		},
		{
			MethodName: "ShowIprpcData",
			Handler:    _Query_ShowIprpcData_Handler,
		},
		{
			MethodName: "SpecTrackedInfo",
			Handler:    _Query_SpecTrackedInfo_Handler,
		},
		{
			MethodName: "IprpcProviderRewardEstimation",
			Handler:    _Query_IprpcProviderRewardEstimation_Handler,
		},
		{
			MethodName: "IprpcSpecReward",
			Handler:    _Query_IprpcSpecReward_Handler,
		},
		{
			MethodName: "PendingIbcIprpcFunds",
			Handler:    _Query_PendingIbcIprpcFunds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/rewards/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllocationPoolMonthsLeft != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AllocationPoolMonthsLeft))
		i--
		dAtA[i] = 0x20
	}
	if m.EstimatedBlocksToRefill != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EstimatedBlocksToRefill))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeToRefill != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeToRefill))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBlockRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryShowIprpcDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowIprpcDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowIprpcDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryShowIprpcDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowIprpcDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowIprpcDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IprpcSubscriptions) > 0 {
		for iNdEx := len(m.IprpcSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IprpcSubscriptions[iNdEx])
			copy(dAtA[i:], m.IprpcSubscriptions[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.IprpcSubscriptions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.MinCost.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySpecTrackedInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecTrackedInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecTrackedInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpecTrackedInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecTrackedInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecTrackedInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIprpcProviderRewardEstimationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIprpcProviderRewardEstimationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIprpcProviderRewardEstimationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIprpcProviderRewardEstimationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIprpcProviderRewardEstimationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIprpcProviderRewardEstimationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecFunds) > 0 {
		for iNdEx := len(m.SpecFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIprpcSpecRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIprpcSpecRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIprpcSpecRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spec) > 0 {
		i -= len(m.Spec)
		copy(dAtA[i:], m.Spec)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Spec)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIprpcSpecRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIprpcSpecRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIprpcSpecRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentMonthId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentMonthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IprpcRewards) > 0 {
		for iNdEx := len(m.IprpcRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IprpcRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingIbcIprpcFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingIbcIprpcFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingIbcIprpcFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingIbcIprpcFundInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingIbcIprpcFundInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingIbcIprpcFundInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Cost.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.PendingIbcIprpcFund.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPendingIbcIprpcFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingIbcIprpcFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingIbcIprpcFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingIbcIprpcFundsInfo) > 0 {
		for iNdEx := len(m.PendingIbcIprpcFundsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingIbcIprpcFundsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TimeToRefill != 0 {
		n += 1 + sovQuery(uint64(m.TimeToRefill))
	}
	if m.EstimatedBlocksToRefill != 0 {
		n += 1 + sovQuery(uint64(m.EstimatedBlocksToRefill))
	}
	if m.AllocationPoolMonthsLeft != 0 {
		n += 1 + sovQuery(uint64(m.AllocationPoolMonthsLeft))
	}
	return n
}

func (m *QueryBlockRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBlockRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShowIprpcDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryShowIprpcDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinCost.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.IprpcSubscriptions) > 0 {
		for _, s := range m.IprpcSubscriptions {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpecTrackedInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpecTrackedInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIprpcProviderRewardEstimationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIprpcProviderRewardEstimationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecFunds) > 0 {
		for _, e := range m.SpecFunds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIprpcSpecRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIprpcSpecRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IprpcRewards) > 0 {
		for _, e := range m.IprpcRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.CurrentMonthId != 0 {
		n += 1 + sovQuery(uint64(m.CurrentMonthId))
	}
	return n
}

func (m *QueryPendingIbcIprpcFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PendingIbcIprpcFundInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingIbcIprpcFund.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Cost.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPendingIbcIprpcFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingIbcIprpcFundsInfo) > 0 {
		for _, e := range m.PendingIbcIprpcFundsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, PoolInfo{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeToRefill", wireType)
			}
			m.TimeToRefill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeToRefill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedBlocksToRefill", wireType)
			}
			m.EstimatedBlocksToRefill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimatedBlocksToRefill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationPoolMonthsLeft", wireType)
			}
			m.AllocationPoolMonthsLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocationPoolMonthsLeft |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowIprpcDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowIprpcDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowIprpcDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowIprpcDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowIprpcDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowIprpcDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IprpcSubscriptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IprpcSubscriptions = append(m.IprpcSubscriptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecTrackedInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecTrackedInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecTrackedInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecTrackedInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecTrackedInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecTrackedInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, BasePayWithIndex{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIprpcProviderRewardEstimationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIprpcProviderRewardEstimationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIprpcProviderRewardEstimationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIprpcProviderRewardEstimationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIprpcProviderRewardEstimationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIprpcProviderRewardEstimationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecFunds = append(m.SpecFunds, Specfund{})
			if err := m.SpecFunds[len(m.SpecFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIprpcSpecRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIprpcSpecRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIprpcSpecRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIprpcSpecRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIprpcSpecRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIprpcSpecRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IprpcRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IprpcRewards = append(m.IprpcRewards, IprpcReward{})
			if err := m.IprpcRewards[len(m.IprpcRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMonthId", wireType)
			}
			m.CurrentMonthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMonthId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingIbcIprpcFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingIbcIprpcFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingIbcIprpcFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingIbcIprpcFundInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingIbcIprpcFundInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingIbcIprpcFundInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingIbcIprpcFund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingIbcIprpcFund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingIbcIprpcFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingIbcIprpcFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingIbcIprpcFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingIbcIprpcFundsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingIbcIprpcFundsInfo = append(m.PendingIbcIprpcFundsInfo, PendingIbcIprpcFundInfo{})
			if err := m.PendingIbcIprpcFundsInfo[len(m.PendingIbcIprpcFundsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
